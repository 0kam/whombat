"""Prediction Run model.

A Prediction Run is an essential component of an annotation project,
particularly when the goal is to train a machine learning model. It is a set of
predictions generated by a model or user over a group of recording clips. 

Prediction run must have a name and version to identify the model used to
generate the predictions or the username of the user doing the predictions.

The prediction run is composed of predictions made in recording clips. These
predictions can be in the form of predicted tags at the clip level or as
predicted sound events, each with its own set of predicted tags. The predicted
tags also have a probability assigned, which indicates the confidence level of
the model's predictions.

Prediction Runs can be explored and evaluated using the annotations from an
evaluation set. By comparing the model's or users' predictions to the
annotations, it is possible to assess the accuracy and identify areas
where it is struggling. This information can be used to improve the model by
refining the training data or adjusting the model's parameters.
"""

import typing
from uuid import UUID, uuid4

import sqlalchemy.orm as orm
from sqlalchemy import ForeignKey, UniqueConstraint

from whombat.models.base import Base
from whombat.models.evaluation_set import EvaluationSet
from whombat.models.note import Note

if typing.TYPE_CHECKING:
    from whombat.models.clip_prediction import ClipPrediction
    from whombat.models.evaluation import Evaluation

__all__ = [
    "PredictionRun",
    "PredictionRunNote",
]


class PredictionRun(Base):
    """Prediction Run model."""

    __tablename__ = "prediction_run"

    id: orm.Mapped[int] = orm.mapped_column(primary_key=True)
    """Unique identifier of the prediction run."""

    uuid: orm.Mapped[UUID] = orm.mapped_column(
        default_factory=uuid4,
        kw_only=True,
        unique=True,
    )
    """Unique identifier of the prediction run."""

    user_id: orm.Mapped[UUID] = orm.mapped_column(
        ForeignKey("user.id"),
        nullable=True,
    )
    """Unique identifier of the user who created the prediction run."""

    model_name: orm.Mapped[str] = orm.mapped_column(nullable=True)
    """Name of the model used to generate the predictions."""

    model_version: orm.Mapped[str] = orm.mapped_column(nullable=True)
    """Version of the model used to generate the predictions."""

    evaluation_set_id: orm.Mapped[int] = orm.mapped_column(
        ForeignKey("evaluation_set.id"),
        nullable=False,
    )
    """Unique identifier of the evaluation set."""

    evaluation_set: orm.Mapped[EvaluationSet] = orm.relationship(
        "EvaluationSet",
        back_populates="prediction_runs",
        lazy="joined",
        init=False,
        repr=False,
    )
    """Evaluation set to which the prediction run belongs."""

    evaluation: orm.Mapped["Evaluation"] = orm.relationship(
        "Evaluation",
        back_populates="prediction_run",
        cascade="all, delete-orphan",
        lazy="joined",
        init=False,
        repr=False,
    )
    """Result of the evaluation of the prediction run."""

    clip_predictions: orm.Mapped[list["ClipPrediction"]] = orm.relationship(
        "ClipPrediction",
        back_populates="prediction_run",
        cascade="all, delete-orphan",
        init=False,
        repr=False,
        default_factory=list,
    )
    """Predictions made in recording clips."""

    notes: orm.Mapped[list["PredictionRunNote"]] = orm.relationship(
        "PredictionRunNote",
        back_populates="prediction_run",
        cascade="all, delete-orphan",
        lazy="joined",
        init=False,
        repr=False,
        default_factory=list,
    )


class PredictionRunNote(Base):
    """Prediction Run Note model."""

    __tablename__ = "prediction_run_note"

    prediction_run_id: orm.Mapped[int] = orm.mapped_column(
        ForeignKey("prediction_run.id"),
        nullable=False,
        primary_key=True,
    )
    """Unique identifier of the prediction run."""

    prediction_run: orm.Mapped[PredictionRun] = orm.relationship(
        "PredictionRun",
        back_populates="notes",
        init=False,
        repr=False,
    )
    """prediction run to which the note belongs."""

    note_id: orm.Mapped[int] = orm.mapped_column(
        ForeignKey("note.id"),
        nullable=False,
        primary_key=True,
    )
    """Unique identifier of the note."""

    note: orm.Mapped[Note] = orm.relationship(
        "Note",
        lazy="joined",
        init=False,
        repr=False,
    )
    """Note to which the prediction run note belongs."""

    __table_args__ = (
        UniqueConstraint(
            "prediction_run_id",
            "note_id",
        ),
    )
